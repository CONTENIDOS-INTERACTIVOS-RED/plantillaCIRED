{"remainingRequest":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/plantillaCIRED/plantillaCIRED/src/components/plantilla/ScrollHorizontal.vue?vue&type=style&index=0&id=b934bcc2&lang=sass&scoped=true&","dependencies":[{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/src/components/plantilla/ScrollHorizontal.vue","mtime":1737080005133},{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/plantillaCIRED/plantillaCIRED/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouaG9yaXpvbnRhbC1zY3JvbGxfX3dyYXBwZXIKICBvdmVyZmxvdzogaGlkZGVuCi5ob3Jpem9udGFsLXNjcm9sbAogIGRpc3BsYXk6IGZsZXgKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41cyBlYXNlLWluLW91dAogIGFsaWduLWl0ZW1zOiBjZW50ZXIKICBmbGV4LXdyYXA6IG5vd3JhcAogICY6bm90KC5yb3cpCiAgICB3aWR0aDogMTAwJQogICYtLWl0ZW0tZncKICAgICYgOjp2LWRlZXAgPiBkaXYKICAgICAgZmxleC1ncm93OiAwCiAgICAgIGZsZXgtc2hyaW5rOiAwCiAgICAgIHdpZHRoOiAxMDAlCiAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50Cg=="},{"version":3,"sources":["ScrollHorizontal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ScrollHorizontal.vue","sourceRoot":"src/components/plantilla","sourcesContent":["<template lang=\"pug\">\n.horizontal-scroll__wrapper(ref=\"hContainer\")\n  .horizontal-scroll(\n    :class=\"[{'horizontal-scroll--item-fw':itemFullWidth},{'row':row}]\"\n    :style=\"[{transform: `translate(${scrollVal}px,0px)`}]\"\n  )\n    slot\n</template>\n\n<script>\nexport default {\n  name: 'ScrollHorizontal',\n  props: {\n    selectedId: {\n      type: String,\n      default: '',\n    },\n    itemFullWidth: {\n      type: Boolean,\n      default: false,\n    },\n    row: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      scrollVal: 0,\n      ids: [],\n    }\n  },\n  watch: {\n    selectedId(newVal) {\n      if (newVal.length) {\n        this.scroll()\n      }\n    },\n  },\n  mounted() {\n    this.getCords()\n    this.scroll()\n    window.addEventListener('resize', this.scroll)\n  },\n  updated() {\n    this.getCords()\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.scroll)\n  },\n  methods: {\n    scroll() {\n      const selectedElementId = this.ids.find(\n        item => item.id === this.selectedId,\n      )?.id\n      const selectedElement = document.getElementById(selectedElementId)\n      if (\n        !Object.keys(this.$slots.default).length ||\n        !this.selectedId.length ||\n        selectedElement === null\n      )\n        return\n      const container = this.$refs.hContainer\n      const scrollContentTotalWidth =\n        selectedElement.offsetWidth * this.ids.length\n      let newScrollVal = selectedElement.offsetLeft\n      const elementsFitInContainer =\n        container.offsetWidth / selectedElement.offsetWidth\n      if (\n        elementsFitInContainer > 1 &&\n        scrollContentTotalWidth - newScrollVal < container.offsetWidth\n      ) {\n        newScrollVal = scrollContentTotalWidth - container.offsetWidth\n      }\n      this.scrollVal = this.ids.length === 1 ? 0 : -newScrollVal\n    },\n    getCords() {\n      if (this.$slots.default) {\n        this.ids = this.$slots.default.map(element => ({\n          id: element.elm.id,\n          key: element.key,\n        }))\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"sass\" scoped>\n.horizontal-scroll__wrapper\n  overflow: hidden\n.horizontal-scroll\n  display: flex\n  transition: transform 0.5s ease-in-out\n  align-items: center\n  flex-wrap: nowrap\n  &:not(.row)\n    width: 100%\n  &--item-fw\n    & ::v-deep > div\n      flex-grow: 0\n      flex-shrink: 0\n      width: 100%\n      margin: 0 !important\n</style>\n"]}]}